[{"E:\\work\\lingye\\src\\index.tsx":"1","E:\\work\\lingye\\src\\app.tsx":"2","E:\\work\\lingye\\src\\pages\\website\\website.tsx":"3","E:\\work\\lingye\\src\\pages\\chat\\index.tsx":"4","E:\\work\\lingye\\src\\pages\\login\\index.tsx":"5","E:\\work\\lingye\\src\\pages\\website\\children\\headerpage.tsx":"6","E:\\work\\lingye\\src\\pages\\website\\component\\footer.tsx":"7","E:\\work\\lingye\\src\\pages\\website\\component\\custumer.tsx":"8","E:\\work\\lingye\\src\\pages\\website\\component\\header.tsx":"9","E:\\work\\lingye\\src\\pages\\website\\children\\chat.tsx":"10","E:\\work\\lingye\\src\\components\\privateRoute.tsx":"11"},{"size":159,"mtime":1627619915660,"results":"12","hashOfConfig":"13"},{"size":877,"mtime":1627638279103,"results":"14","hashOfConfig":"13"},{"size":614,"mtime":1627638382129,"results":"15","hashOfConfig":"13"},{"size":6128,"mtime":1627637632573,"results":"16","hashOfConfig":"13"},{"size":2344,"mtime":1627637266131,"results":"17","hashOfConfig":"13"},{"size":4103,"mtime":1627633456482,"results":"18","hashOfConfig":"13"},{"size":1289,"mtime":1627634427442,"results":"19","hashOfConfig":"13"},{"size":939,"mtime":1627619915667,"results":"20","hashOfConfig":"13"},{"size":1119,"mtime":1627619915667,"results":"21","hashOfConfig":"13"},{"size":1855,"mtime":1627635822810,"results":"22","hashOfConfig":"13"},{"size":8545,"mtime":1627638331166,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1cps7vr",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\work\\lingye\\src\\index.tsx",[],["48","49"],"E:\\work\\lingye\\src\\app.tsx",[],"E:\\work\\lingye\\src\\pages\\website\\website.tsx",[],"E:\\work\\lingye\\src\\pages\\chat\\index.tsx",["50","51","52","53","54","55","56","57","58"],"import { Input, message } from 'antd';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport './style.less'\r\nconst { TextArea } = Input;\r\nconst boy = require('../../assets/boy.png').default;\r\nconst girl = require('../../assets/girl.png').default;\r\nconst ChatPC: React.FC = (props: any) => {\r\n    const {\r\n        userList,\r\n        userActive,\r\n        onClickSelectUser,\r\n        userName,\r\n        adminUser,\r\n        chatList,\r\n        msg,\r\n        setmessage,\r\n        sendMessage\r\n    } = props;\r\n\r\n    return (\r\n        <section className='chat-window'>\r\n            <section className='chat-pc'>\r\n                <div className='char-content'>\r\n                    <div className='chat-left'>\r\n                        <div className='search'>\r\n                            <input type=\"text\" />\r\n                            <span className='icon'></span>\r\n                        </div>\r\n                        {\r\n                            userList && userList.length && userList.map((item: any) => {\r\n                                return <div\r\n                                    key={item.key}\r\n                                    className={userActive === item.userName ? 'active chat-row' : 'chat-row'}\r\n                                    onClick={() => onClickSelectUser(item)}\r\n                                >\r\n                                    <div >\r\n                                        <img src={boy} alt=\"\" />\r\n                                    </div>\r\n                                    <span>{item.userName}</span>\r\n                                </div>\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className='chat-right'>\r\n                        <div className='right-title'>{userName}</div>\r\n                        <div className='right-msg'>\r\n                            {\r\n                                adminUser === 'admin' ? <div className='chat'>\r\n                                    <div className='chat-msg left'>\r\n                                        <span className='girl'></span>\r\n                                        <span>\r\n                                            撒大声地付\r\n                                            多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多\r\n                                            {/* <span className=\"arrow\"></span> */}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className='chat-msg right'>\r\n                                        <span className='girl'></span>\r\n                                        <span>\r\n                                            撒大声地付\r\n                                            多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多\r\n                                            {/* <span className=\"arrow\"></span> */}\r\n                                        </span>\r\n                                    </div>\r\n                                </div> : <div className='chat'>\r\n                                    {chatList && chatList.length && chatList.map((item: { sender: string; message: {} | null | undefined; }, index: React.Key | null | undefined) => {\r\n                                        if (item.sender === 'admin') {\r\n                                            return <div className='chat-msg left' key={index}>\r\n                                                <span className='girl'></span>\r\n                                                <span>{item.message}</span>\r\n                                            </div>\r\n                                        } else {\r\n                                            return <div className='chat-msg right' key={index}>\r\n                                                <span className='girl'></span>\r\n                                                <span>{item.message}</span>\r\n                                            </div>\r\n                                        }\r\n                                    })}\r\n\r\n\r\n                                </div>\r\n                            }\r\n\r\n                        </div>\r\n                        <div className='right-send'>\r\n                            <div className='send-push'>\r\n                                <TextArea\r\n                                    value={msg}\r\n                                    onChange={(e) => setmessage(e.target.value)\r\n                                    }\r\n                                    autoSize={{ minRows: 3, maxRows: 3 }}\r\n                                />\r\n                            </div>\r\n                            <div className='send-btn' onClick={sendMessage}>\r\n                                <button>发送</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ChatPC\r\n\r\nfunction item(item: any, index: any): string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined {\r\n    throw new Error('Function not implemented.');\r\n}\r\nfunction index(item: (item: any, index: any) => string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined, index: any): string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n","E:\\work\\lingye\\src\\pages\\login\\index.tsx",[],"E:\\work\\lingye\\src\\pages\\website\\children\\headerpage.tsx",[],"E:\\work\\lingye\\src\\pages\\website\\component\\footer.tsx",[],"E:\\work\\lingye\\src\\pages\\website\\component\\custumer.tsx",[],"E:\\work\\lingye\\src\\pages\\website\\component\\header.tsx",[],"E:\\work\\lingye\\src\\pages\\website\\children\\chat.tsx",[],"E:\\work\\lingye\\src\\components\\privateRoute.tsx",["59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":24},{"ruleId":"65","severity":1,"message":"69","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"70","line":2,"column":28,"nodeType":"67","messageId":"68","endLine":2,"endColumn":34},{"ruleId":"65","severity":1,"message":"71","line":2,"column":36,"nodeType":"67","messageId":"68","endLine":2,"endColumn":44},{"ruleId":"65","severity":1,"message":"72","line":3,"column":8,"nodeType":"67","messageId":"68","endLine":3,"endColumn":15},{"ruleId":"65","severity":1,"message":"73","line":4,"column":8,"nodeType":"67","messageId":"68","endLine":4,"endColumn":13},{"ruleId":"65","severity":1,"message":"74","line":8,"column":7,"nodeType":"67","messageId":"68","endLine":8,"endColumn":11},{"ruleId":"65","severity":1,"message":"75","line":109,"column":10,"nodeType":"67","messageId":"68","endLine":109,"endColumn":14},{"ruleId":"65","severity":1,"message":"76","line":112,"column":10,"nodeType":"67","messageId":"68","endLine":112,"endColumn":15},{"ruleId":"77","severity":1,"message":"78","line":63,"column":8,"nodeType":"79","endLine":63,"endColumn":10,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":79,"column":8,"nodeType":"79","endLine":79,"endColumn":18,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'message' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'Cookies' is defined but never used.","'axios' is defined but never used.","'girl' is assigned a value but never used.","'item' is defined but never used.","'index' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'adminUser', 'getNewUser', and 'onopen'. Either include them or remove the dependency array.","ArrayExpression",["85"],"React Hook useEffect has missing dependencies: 'adminUser', 'userActive', and 'userName'. Either include them or remove the dependency array.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [adminUser, getNewUser, onopen]",{"range":"91","text":"92"},"Update the dependencies array to be: [adminUser, userActive, userList, userName]",{"range":"93","text":"94"},[2485,2487],"[adminUser, getNewUser, onopen]",[3019,3029],"[adminUser, userActive, userList, userName]"]