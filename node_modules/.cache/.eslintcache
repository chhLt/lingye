[{"D:\\project\\lingye\\src\\index.tsx":"1","D:\\project\\lingye\\src\\app.tsx":"2","D:\\project\\lingye\\src\\pages\\login\\index.tsx":"3","D:\\project\\lingye\\src\\pages\\chat\\index.tsx":"4","D:\\project\\lingye\\src\\pages\\website\\website.tsx":"5","D:\\project\\lingye\\src\\pages\\website\\children\\headerpage.tsx":"6","D:\\project\\lingye\\src\\pages\\website\\component\\header.tsx":"7","D:\\project\\lingye\\src\\pages\\website\\component\\footer.tsx":"8","D:\\project\\lingye\\src\\pages\\website\\component\\custumer.tsx":"9"},{"size":159,"mtime":1627435355540,"results":"10","hashOfConfig":"11"},{"size":669,"mtime":1627436022138,"results":"12","hashOfConfig":"11"},{"size":2333,"mtime":1627434687452,"results":"13","hashOfConfig":"11"},{"size":13660,"mtime":1627435620162,"results":"14","hashOfConfig":"11"},{"size":533,"mtime":1627440489220,"results":"15","hashOfConfig":"11"},{"size":4063,"mtime":1627464136076,"results":"16","hashOfConfig":"11"},{"size":1119,"mtime":1627465954724,"results":"17","hashOfConfig":"11"},{"size":1261,"mtime":1627465741282,"results":"18","hashOfConfig":"11"},{"size":939,"mtime":1627452913853,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"17iueu0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\project\\lingye\\src\\index.tsx",[],["41","42"],"D:\\project\\lingye\\src\\app.tsx",[],"D:\\project\\lingye\\src\\pages\\login\\index.tsx",[],"D:\\project\\lingye\\src\\pages\\chat\\index.tsx",["43","44","45","46","47","48"],"import { Input, message } from 'antd';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport './style.less'\r\nconst { TextArea } = Input;\r\nconst boy = require('../../assets/boy.png').default;\r\nconst girl = require('../../assets/girl.png').default;\r\nconst ChatPC: React.FC = () => {\r\n    // socket\r\n    let ws;\r\n    let httpUrl = \"http://websocket.sendcmd.com\";\r\n    let wsUrl = \"ws://websocket.sendcmd.com:9004\";\r\n    // let httpUrl = \"http://192.168.3.17:9004\";\r\n    // let wsUrl = \"ws://192.168.3.17:9004\";\r\n    let currentUserList: any = useRef()\r\n    let currentUserActive: any = useRef() // 选中的聊天用户\r\n    let currentChatList: any = useRef() // 用户聊天列表\r\n    const [userList, setuserList] = useState<Array<any>>() // 客服聊天列表\r\n    const [chatList, setchatList] = useState<Array<any>>() // 用户聊天列表\r\n    const [sessionIds, setsessionIds] = useState<Array<any>>()\r\n    const [userActive, setuserActive] = useState<string | undefined>();\r\n    const [userName, setuseruserName] = useState<string | undefined>();\r\n    const [adminUser] = useState(Cookies.get(\"user\"))\r\n    const [msg, setmessage] = useState<any>(\"\")\r\n    const [myID, setmyID] = useState<string>()\r\n    const onClickSelectUser = (item: any): void => {\r\n        setuserActive(item.key);\r\n        currentUserActive.current = item.key;\r\n        currentUserActive.current = item.key;\r\n        setuseruserName(item.userName)\r\n    }\r\n    useEffect(() => {\r\n        if (adminUser === 'admin') {\r\n            onopen(adminUser);\r\n            let _userList = sessionStorage.getItem('userList')\r\n            if (_userList !== null) {\r\n                setuserList(JSON.parse(_userList))\r\n            }\r\n        } else {\r\n            let key = sessionStorage.getItem('myID')\r\n            let _currentChatList = sessionStorage.getItem('currentChatList')\r\n            if (key) {\r\n                setmyID(key)\r\n                onopen(key);\r\n                if (_currentChatList) {\r\n                    currentChatList.current = JSON.parse(_currentChatList);\r\n                    setchatList(JSON.parse(_currentChatList))\r\n                }\r\n            } else {\r\n                getNewUser()\r\n            }\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n\r\n    }, [chatList])\r\n\r\n    useEffect(() => { // 客服初始化\r\n        if (!userName && !userActive && userList && adminUser === 'admin') {\r\n            // debugger\r\n            console.log(userList[0].userName);\r\n            let userName = userList[0].userName\r\n            let key = userList[0].key\r\n            currentUserActive.current = key;\r\n            currentUserActive.current = userName;\r\n            setuserActive(userList[0].key);\r\n            setuseruserName(userList[0].userName)\r\n        }\r\n    }, [userList])\r\n\r\n    /**\r\n     * 不是admin 生成新用户\r\n     * @param  \r\n     */\r\n    const getNewUser = () => {\r\n        let url = httpUrl + \"/chat/getRoomProof\";\r\n        axios.get(url).then(response => {\r\n            let res = response.data;\r\n            if (200 === res.success) {\r\n                setmyID(res.data)\r\n                sessionStorage.setItem('myID', res.data)\r\n                onopen(res.data);\r\n            }\r\n        });\r\n    }\r\n    /*\r\n     * 加入到房间\r\n     */\r\n    const onopen = (proof: string) => {\r\n        // let addRoomUrl = 'ws://127.0.0.1:9004/chat-room/' + proof;\r\n        let addRoomUrl = wsUrl + '/chat-room/' + proof;\r\n        ws = new WebSocket(addRoomUrl);\r\n\r\n        // 连接\r\n        ws.onopen = () => {\r\n            console.log(\"[\" + proof + \"] 加入连接...\");\r\n        };\r\n\r\n        // 接收消息\r\n        ws.onmessage = (event) => {\r\n            // 服务端发送的消息\r\n            let dto = JSON.parse(event.data);\r\n            // flag\r\n            const { sender, message, flag } = dto;\r\n            if (adminUser === 'admin') { // 客服\r\n                let _userList = currentUserList.current || [];\r\n                const { state, index } = isExistUser(sender, _userList);\r\n                if (flag === 0) { // 聊天\r\n\r\n                }\r\n                if (flag === 1 && sender !== \"admin\") { // 进入聊天\r\n                    if (_userList.length === 0 || !state) { // 没有用户 或者 不在用户列表中\r\n                        _userList.unshift({ key: sender, flag, userName: sender, charList: [{ sender: \"admin\", message: '你好' }] })\r\n                    }\r\n                    if (state) { // 存在用户列表中 \r\n                        _userList[index].flag = flag\r\n                    }\r\n                }\r\n                if (flag === 2) { //离开 \r\n                    if (_userList.length !== 0) {\r\n                        let leave = _userList.splice(index, 1)[0];\r\n                        leave['flag'] = flag;\r\n                        _userList.push(leave)\r\n                    }\r\n                }\r\n                if (_userList.length !== 0) {\r\n                    currentUserList.current = _userList;\r\n                    sessionStorage.setItem(\"userList\", JSON.stringify(_userList));\r\n                    setuserList([..._userList])\r\n                }\r\n            } else { // 用户\r\n                let _currentChatList = currentChatList.current || [];\r\n                if (flag === 0) { // 聊天\r\n                    _currentChatList.push({ sender, message });\r\n                }\r\n                if (flag === 1 && !sessionStorage.getItem('currentChatList')) { // 进入聊天\r\n                    _currentChatList.push({ sender: \"admin\", message: '你好' })\r\n                }\r\n                currentChatList.current = _currentChatList;\r\n                setchatList([..._currentChatList])\r\n                sessionStorage.setItem(\"currentChatList\", JSON.stringify(_currentChatList));\r\n            }\r\n        };\r\n\r\n        // 关闭连接\r\n        ws.onclose = () => {\r\n            // $('#message_content').append('[' + proof + '] 离开了聊天室!');\r\n            // console.log(\"[\" + proof + \"] 退出连接...\");\r\n        }\r\n    }\r\n    // 判断用户是否存着客户聊天列表\r\n    const isExistUser = (key: string, userList: any) => {\r\n        let state = false, index = 0;\r\n        userList.forEach((element: any, idx: number) => {\r\n            if (element.key === key) {\r\n                state = true;\r\n                index = idx;\r\n            }\r\n        });\r\n        return { state, index };\r\n    }\r\n    // 发送消息\r\n    const sendMessage = () => {\r\n        if (!msg) {\r\n            message.error(\"请输入消息内容\");\r\n            return false\r\n        }\r\n        let sendToHimUrl: string;\r\n        let param: any;\r\n        if (adminUser === \"admin\") {\r\n            sendToHimUrl = httpUrl + '/chat/admin/sendToHim'\r\n            param = {\r\n                who: userActive,\r\n                msg: msg\r\n            }\r\n        } else {\r\n            sendToHimUrl = httpUrl + '/chat/' + myID + '/sendToHim'\r\n            param = {\r\n                who: \"admin\",\r\n                msg: msg\r\n            }\r\n        }\r\n        axios.post(sendToHimUrl, param).then((response: { data: any; }) => {\r\n            let res = response.data;\r\n            if (200 === res.success) {\r\n                // 清空发送的消息\r\n                setmessage(\"\")\r\n            } else {\r\n                setmessage(\"\")\r\n                message.error(res.message)\r\n            }\r\n        })\r\n    }\r\n    // 连接的是哪个客服\r\n    const getCustomerService = (sessionIds: any) => {\r\n        let cName: string = \"\";\r\n        if (sessionIds) {\r\n            sessionIds.forEach((element: any) => {\r\n                if (element.indexOf(\"admin\") !== -1) {\r\n                    cName = element\r\n                }\r\n            });\r\n        }\r\n        return cName;\r\n    }\r\n\r\n    return (\r\n        <section className='chat-window'>\r\n            <section className='chat-pc'>\r\n                <div className='char-content'>\r\n                    {\r\n                        adminUser === 'admin' ? <div className='chat-left'>\r\n                            <div className='search'>\r\n                                <input type=\"text\" />\r\n                                <span className='icon'></span>\r\n                            </div>\r\n                            {\r\n                                userList && userList.length && userList.map((item: any) => {\r\n                                    return <div\r\n                                        key={item.key}\r\n                                        className={userActive === item.userName ? 'active chat-row' : 'chat-row'}\r\n                                        onClick={() => onClickSelectUser(item)}\r\n                                    >\r\n                                        <div >\r\n                                            <img src={boy} alt=\"\" />\r\n                                        </div>\r\n                                        <span>{item.userName}</span>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div> : \"\"\r\n                    }\r\n\r\n                    <div className='chat-right'>\r\n                        <div className='right-title'>{userName}</div>\r\n                        <div className='right-msg'>\r\n                            <div className='connect-msg'>\r\n                                {adminUser ? `${adminUser}连接成功` : `客服${getCustomerService(sessionIds)}为你服务`}\r\n                            </div>\r\n                            {\r\n                                adminUser === 'admin' ? <div className='chat'>\r\n                                    <div className='chat-msg left'>\r\n                                        <span className='girl'></span>\r\n                                        <span>\r\n                                            撒大声地付\r\n                                            多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多\r\n                                            {/* <span className=\"arrow\"></span> */}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className='chat-msg right'>\r\n                                        <span className='girl'></span>\r\n                                        <span>\r\n                                            撒大声地付\r\n                                            多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多撒大声地付多撒所多\r\n                                            {/* <span className=\"arrow\"></span> */}\r\n                                        </span>\r\n                                    </div>\r\n                                </div> : <div className='chat'>\r\n                                    {chatList && chatList.length && chatList.map((item, index) => {\r\n                                        if (item.sender === 'admin') {\r\n                                            return <div className='chat-msg left' key={index}>\r\n                                                <span className='girl'></span>\r\n                                                <span>{item.message}</span>\r\n                                            </div>\r\n                                        } else {\r\n                                            return <div className='chat-msg right' key={index}>\r\n                                                <span className='girl'></span>\r\n                                                <span>{item.message}</span>\r\n                                            </div>\r\n                                        }\r\n                                    })}\r\n\r\n\r\n                                </div>\r\n                            }\r\n\r\n                        </div>\r\n                        <div className='right-send'>\r\n                            <div className='send-push'>\r\n                                <TextArea\r\n                                    value={msg}\r\n                                    onChange={(e) => setmessage(e.target.value)\r\n                                    }\r\n                                    autoSize={{ minRows: 3, maxRows: 3 }}\r\n                                />\r\n                            </div>\r\n                            <div className='send-btn' onClick={sendMessage}>\r\n                                <button>发送</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ChatPC\r\n\r\nfunction item(item: any, index: any): string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined {\r\n    throw new Error('Function not implemented.');\r\n}\r\nfunction index(item: (item: any, index: any) => string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined, index: any): string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined {\r\n    throw new Error('Function not implemented.');\r\n}\r\n\r\n","D:\\project\\lingye\\src\\pages\\website\\website.tsx",["49"],"import HeadPage from './children/headerpage'\r\nimport Header from './component/header'\r\nimport Footer from './component/footer'\r\nimport Custumer from './component/custumer'\r\nimport './style.less'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nfunction Website() {\r\n\r\n  return (\r\n    <div className='website'>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact={false} component={HeadPage}></Route>\r\n      </Switch>\r\n      <Footer />\r\n      <Custumer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Website;","D:\\project\\lingye\\src\\pages\\website\\children\\headerpage.tsx",[],"D:\\project\\lingye\\src\\pages\\website\\component\\header.tsx",[],"D:\\project\\lingye\\src\\pages\\website\\component\\footer.tsx",[],"D:\\project\\lingye\\src\\pages\\website\\component\\custumer.tsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":8,"column":7,"nodeType":"56","messageId":"57","endLine":8,"endColumn":11},{"ruleId":"54","severity":1,"message":"58","line":21,"column":24,"nodeType":"56","messageId":"57","endLine":21,"endColumn":37},{"ruleId":"59","severity":1,"message":"60","line":54,"column":8,"nodeType":"61","endLine":54,"endColumn":10,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":70,"column":8,"nodeType":"61","endLine":70,"endColumn":18,"suggestions":"64"},{"ruleId":"54","severity":1,"message":"65","line":301,"column":10,"nodeType":"56","messageId":"57","endLine":301,"endColumn":14},{"ruleId":"54","severity":1,"message":"66","line":304,"column":10,"nodeType":"56","messageId":"57","endLine":304,"endColumn":15},{"ruleId":"54","severity":1,"message":"67","line":6,"column":10,"nodeType":"56","messageId":"57","endLine":6,"endColumn":23},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'girl' is assigned a value but never used.","Identifier","unusedVar","'setsessionIds' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'adminUser', 'getNewUser', and 'onopen'. Either include them or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has missing dependencies: 'adminUser', 'userActive', and 'userName'. Either include them or remove the dependency array.",["71"],"'item' is defined but never used.","'index' is defined but never used.","'BrowserRouter' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [adminUser, getNewUser, onopen]",{"range":"76","text":"77"},"Update the dependencies array to be: [adminUser, userActive, userList, userName]",{"range":"78","text":"79"},[2244,2246],"[adminUser, getNewUser, onopen]",[2778,2788],"[adminUser, userActive, userList, userName]"]