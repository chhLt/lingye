{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\n\nvar _jsxFileName = \"E:\\\\work\\\\lingye\\\\src\\\\components\\\\privateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport { Route, withRouter } from 'react-router-dom';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = props => {\n  _s();\n\n  const {\n    path = \"/\",\n    exact = false,\n    component: Component,\n    strict = false\n  } = props;\n  let ws;\n  let httpUrl = \"http://websocket.sendcmd.com\";\n  let wsUrl = \"ws://websocket.sendcmd.com:9004\"; // let httpUrl = \"http://192.168.3.17:9004\";\n  // let wsUrl = \"ws://192.168.3.17:9004\";\n\n  let currentUserList = useRef();\n  let currentUserActive = useRef(); // 选中的聊天用户\n\n  let currentChatList = useRef(); // 用户聊天列表\n\n  const [userList, setuserList] = useState(); // 客服聊天列表\n\n  const [chatList, setchatList] = useState(); // 用户聊天列表\n  // const [sessionIds, setsessionIds] = useState<Array<any>>()\n\n  const [userActive, setuserActive] = useState();\n  const [userName, setuseruserName] = useState();\n  const [adminUser] = useState(Cookies.get(\"user\"));\n  const [msg, setmessage] = useState(\"\");\n  const [myID, setmyID] = useState();\n\n  const onClickSelectUser = item => {\n    setuserActive(item.key);\n    currentUserActive.current = item.key;\n    currentUserActive.current = item.key;\n    setuseruserName(item.userName);\n  };\n\n  useEffect(() => {\n    if (adminUser === 'admin') {\n      onopen(adminUser);\n\n      let _userList = sessionStorage.getItem('userList');\n\n      if (_userList !== null) {\n        setuserList(JSON.parse(_userList));\n      }\n    } else {\n      let key = sessionStorage.getItem('myID');\n\n      let _currentChatList = sessionStorage.getItem('currentChatList');\n\n      if (key) {\n        setmyID(key);\n        onopen(key);\n\n        if (_currentChatList) {\n          currentChatList.current = JSON.parse(_currentChatList);\n          setchatList(JSON.parse(_currentChatList));\n        }\n      } else {\n        getNewUser();\n      }\n    }\n  }, []);\n  useEffect(() => {}, [chatList]);\n  useEffect(() => {\n    // 客服初始化\n    if (!userName && !userActive && userList && adminUser === 'admin') {\n      // debugger\n      console.log(userList[0].userName);\n      let userName = userList[0].userName;\n      let key = userList[0].key;\n      currentUserActive.current = key;\n      currentUserActive.current = userName;\n      setuserActive(userList[0].key);\n      setuseruserName(userList[0].userName);\n    }\n  }, [userList]);\n  /**\r\n   * 不是admin 生成新用户\r\n   * @param  \r\n   */\n\n  const getNewUser = () => {\n    let url = httpUrl + \"/chat/getRoomProof\";\n    axios.get(url).then(response => {\n      let res = response.data;\n\n      if (200 === res.success) {\n        setmyID(res.data);\n        sessionStorage.setItem('myID', res.data);\n        onopen(res.data);\n      }\n    });\n  };\n  /*\r\n   * 加入到房间\r\n   */\n\n\n  const onopen = proof => {\n    // let addRoomUrl = 'ws://127.0.0.1:9004/chat-room/' + proof;\n    let addRoomUrl = wsUrl + '/chat-room/' + proof;\n    ws = new WebSocket(addRoomUrl); // 连接\n\n    ws.onopen = () => {\n      console.log(\"[\" + proof + \"] 加入连接...\");\n    }; // 接收消息\n\n\n    ws.onmessage = event => {\n      // 服务端发送的消息\n      let dto = JSON.parse(event.data); // flag\n\n      const {\n        sender,\n        message,\n        flag\n      } = dto;\n\n      if (adminUser === 'admin') {\n        // 客服\n        let _userList = currentUserList.current || [];\n\n        const {\n          state,\n          index\n        } = isExistUser(sender, _userList);\n\n        if (flag === 0) {// 聊天\n        }\n\n        if (flag === 1 && sender !== \"admin\") {\n          // 进入聊天\n          if (_userList.length === 0 || !state) {\n            // 没有用户 或者 不在用户列表中\n            _userList.unshift({\n              key: sender,\n              flag,\n              userName: sender,\n              charList: [{\n                sender: \"admin\",\n                message: '你好'\n              }]\n            });\n          }\n\n          if (state) {\n            // 存在用户列表中 \n            _userList[index].flag = flag;\n          }\n        }\n\n        if (flag === 2) {\n          //离开 \n          if (_userList.length !== 0) {\n            let leave = _userList.splice(index, 1)[0];\n\n            leave['flag'] = flag;\n\n            _userList.push(leave);\n          }\n        }\n\n        if (_userList.length !== 0) {\n          currentUserList.current = _userList;\n          sessionStorage.setItem(\"userList\", JSON.stringify(_userList));\n          setuserList([..._userList]);\n        }\n      } else {\n        // 用户\n        let _currentChatList = currentChatList.current || [];\n\n        if (flag === 0) {\n          // 聊天\n          _currentChatList.push({\n            sender,\n            message\n          });\n        }\n\n        if (flag === 1 && !sessionStorage.getItem('currentChatList')) {\n          // 进入聊天\n          _currentChatList.push({\n            sender: \"admin\",\n            message: '你好'\n          });\n        }\n\n        currentChatList.current = _currentChatList;\n        setchatList([..._currentChatList]);\n        sessionStorage.setItem(\"currentChatList\", JSON.stringify(_currentChatList));\n      }\n    }; // 关闭连接\n\n\n    ws.onclose = () => {// $('#message_content').append('[' + proof + '] 离开了聊天室!');\n      // console.log(\"[\" + proof + \"] 退出连接...\");\n    };\n  }; // 判断用户是否存着客户聊天列表\n\n\n  const isExistUser = (key, userList) => {\n    let state = false,\n        index = 0;\n    userList.forEach((element, idx) => {\n      if (element.key === key) {\n        state = true;\n        index = idx;\n      }\n    });\n    return {\n      state,\n      index\n    };\n  }; // 发送消息\n\n\n  const sendMessage = () => {\n    if (!msg) {\n      _message.error(\"请输入消息内容\");\n\n      return false;\n    }\n\n    let sendToHimUrl;\n    let param;\n\n    if (adminUser === \"admin\") {\n      sendToHimUrl = httpUrl + '/chat/admin/sendToHim';\n      param = {\n        who: userActive,\n        msg: msg\n      };\n    } else {\n      sendToHimUrl = httpUrl + '/chat/' + myID + '/sendToHim';\n      param = {\n        who: \"admin\",\n        msg: msg\n      };\n    }\n\n    axios.post(sendToHimUrl, param).then(response => {\n      let res = response.data;\n\n      if (200 === res.success) {\n        // 清空发送的消息\n        setmessage(\"\");\n      } else {\n        setmessage(\"\");\n\n        _message.error(res.message);\n      }\n    });\n  }; // 连接的是哪个客服\n  // const getCustomerService = (sessionIds: any) => {\n  //     let cName: string = \"\";\n  //     if (sessionIds) {\n  //         sessionIds.forEach((element: any) => {\n  //             if (element.indexOf(\"admin\") !== -1) {\n  //                 cName = element\n  //             }\n  //         });\n  //     }\n  //     return cName;\n  // }\n\n\n  const config = {\n    userList,\n    userActive,\n    onClickSelectUser,\n    userName,\n    adminUser,\n    chatList,\n    msg,\n    setmessage,\n    sendMessage\n  };\n  console.log(config);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    exact: exact,\n    strict: strict,\n    render: props => {\n      return /*#__PURE__*/_jsxDEV(Component, { ...props,\n        ...config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 20\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 12\n  }, this);\n};\n\n_s(PrivateRoute, \"UE8ojrwUMiKsDVTlPvE1V3on4+g=\");\n\n_c = PrivateRoute;\nexport default _c2 = withRouter(PrivateRoute);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PrivateRoute\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/work/lingye/src/components/privateRoute.tsx"],"names":["Route","withRouter","React","useEffect","useRef","useState","Cookies","axios","PrivateRoute","props","path","exact","component","Component","strict","ws","httpUrl","wsUrl","currentUserList","currentUserActive","currentChatList","userList","setuserList","chatList","setchatList","userActive","setuserActive","userName","setuseruserName","adminUser","get","msg","setmessage","myID","setmyID","onClickSelectUser","item","key","current","onopen","_userList","sessionStorage","getItem","JSON","parse","_currentChatList","getNewUser","console","log","url","then","response","res","data","success","setItem","proof","addRoomUrl","WebSocket","onmessage","event","dto","sender","message","flag","state","index","isExistUser","length","unshift","charList","leave","splice","push","stringify","onclose","forEach","element","idx","sendMessage","error","sendToHimUrl","param","who","post","config"],"mappings":"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","sourcesContent":["import { Route, withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { message } from 'antd';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\ninterface routeArgs extends RouteComponentProps {\r\n    path: string,\r\n    component: React.LazyExoticComponent<any>,\r\n    exact?: boolean,\r\n    strict?: boolean,\r\n    replace?: boolean,\r\n}\r\nconst PrivateRoute: React.FC<routeArgs> = (props: any) => {\r\n    const {\r\n        path = \"/\",\r\n        exact = false,\r\n        component: Component,\r\n        strict = false,\r\n    } = props;\r\n    let ws;\r\n    let httpUrl = \"http://websocket.sendcmd.com\";\r\n    let wsUrl = \"ws://websocket.sendcmd.com:9004\";\r\n    // let httpUrl = \"http://192.168.3.17:9004\";\r\n    // let wsUrl = \"ws://192.168.3.17:9004\";\r\n    let currentUserList: any = useRef()\r\n    let currentUserActive: any = useRef() // 选中的聊天用户\r\n    let currentChatList: any = useRef() // 用户聊天列表\r\n    const [userList, setuserList] = useState<Array<any>>() // 客服聊天列表\r\n    const [chatList, setchatList] = useState<Array<any>>() // 用户聊天列表\r\n    // const [sessionIds, setsessionIds] = useState<Array<any>>()\r\n    const [userActive, setuserActive] = useState<string | undefined>();\r\n    const [userName, setuseruserName] = useState<string | undefined>();\r\n    const [adminUser] = useState(Cookies.get(\"user\"))\r\n    const [msg, setmessage] = useState<any>(\"\")\r\n    const [myID, setmyID] = useState<string>()\r\n    const onClickSelectUser = (item: any): void => {\r\n        setuserActive(item.key);\r\n        currentUserActive.current = item.key;\r\n        currentUserActive.current = item.key;\r\n        setuseruserName(item.userName)\r\n    }\r\n    useEffect(() => {\r\n        if (adminUser === 'admin') {\r\n            onopen(adminUser);\r\n            let _userList = sessionStorage.getItem('userList')\r\n            if (_userList !== null) {\r\n                setuserList(JSON.parse(_userList))\r\n            }\r\n        } else {\r\n            let key = sessionStorage.getItem('myID')\r\n            let _currentChatList = sessionStorage.getItem('currentChatList')\r\n            if (key) {\r\n                setmyID(key)\r\n                onopen(key);\r\n                if (_currentChatList) {\r\n                    currentChatList.current = JSON.parse(_currentChatList);\r\n                    setchatList(JSON.parse(_currentChatList))\r\n                }\r\n            } else {\r\n                getNewUser()\r\n            }\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n\r\n    }, [chatList])\r\n\r\n    useEffect(() => { // 客服初始化\r\n        if (!userName && !userActive && userList && adminUser === 'admin') {\r\n            // debugger\r\n            console.log(userList[0].userName);\r\n            let userName = userList[0].userName\r\n            let key = userList[0].key\r\n            currentUserActive.current = key;\r\n            currentUserActive.current = userName;\r\n            setuserActive(userList[0].key);\r\n            setuseruserName(userList[0].userName)\r\n        }\r\n    }, [userList])\r\n\r\n    /**\r\n     * 不是admin 生成新用户\r\n     * @param  \r\n     */\r\n    const getNewUser = () => {\r\n        let url = httpUrl + \"/chat/getRoomProof\";\r\n        axios.get(url).then(response => {\r\n            let res = response.data;\r\n            if (200 === res.success) {\r\n                setmyID(res.data)\r\n                sessionStorage.setItem('myID', res.data)\r\n                onopen(res.data);\r\n            }\r\n        });\r\n    }\r\n    /*\r\n     * 加入到房间\r\n     */\r\n    const onopen = (proof: string) => {\r\n        // let addRoomUrl = 'ws://127.0.0.1:9004/chat-room/' + proof;\r\n        let addRoomUrl = wsUrl + '/chat-room/' + proof;\r\n        ws = new WebSocket(addRoomUrl);\r\n\r\n        // 连接\r\n        ws.onopen = () => {\r\n            console.log(\"[\" + proof + \"] 加入连接...\");\r\n        };\r\n\r\n        // 接收消息\r\n        ws.onmessage = (event) => {\r\n            // 服务端发送的消息\r\n            let dto = JSON.parse(event.data);\r\n            // flag\r\n            const { sender, message, flag } = dto;\r\n            if (adminUser === 'admin') { // 客服\r\n                let _userList = currentUserList.current || [];\r\n                const { state, index } = isExistUser(sender, _userList);\r\n                if (flag === 0) { // 聊天\r\n\r\n                }\r\n                if (flag === 1 && sender !== \"admin\") { // 进入聊天\r\n                    if (_userList.length === 0 || !state) { // 没有用户 或者 不在用户列表中\r\n                        _userList.unshift({ key: sender, flag, userName: sender, charList: [{ sender: \"admin\", message: '你好' }] })\r\n                    }\r\n                    if (state) { // 存在用户列表中 \r\n                        _userList[index].flag = flag\r\n                    }\r\n                }\r\n                if (flag === 2) { //离开 \r\n                    if (_userList.length !== 0) {\r\n                        let leave = _userList.splice(index, 1)[0];\r\n                        leave['flag'] = flag;\r\n                        _userList.push(leave)\r\n                    }\r\n                }\r\n                if (_userList.length !== 0) {\r\n                    currentUserList.current = _userList;\r\n                    sessionStorage.setItem(\"userList\", JSON.stringify(_userList));\r\n                    setuserList([..._userList])\r\n                }\r\n            } else { // 用户\r\n                let _currentChatList = currentChatList.current || [];\r\n                if (flag === 0) { // 聊天\r\n                    _currentChatList.push({ sender, message });\r\n                }\r\n                if (flag === 1 && !sessionStorage.getItem('currentChatList')) { // 进入聊天\r\n                    _currentChatList.push({ sender: \"admin\", message: '你好' })\r\n                }\r\n                currentChatList.current = _currentChatList;\r\n                setchatList([..._currentChatList])\r\n                sessionStorage.setItem(\"currentChatList\", JSON.stringify(_currentChatList));\r\n            }\r\n        };\r\n\r\n        // 关闭连接\r\n        ws.onclose = () => {\r\n            // $('#message_content').append('[' + proof + '] 离开了聊天室!');\r\n            // console.log(\"[\" + proof + \"] 退出连接...\");\r\n        }\r\n    }\r\n    // 判断用户是否存着客户聊天列表\r\n    const isExistUser = (key: string, userList: any) => {\r\n        let state = false, index = 0;\r\n        userList.forEach((element: any, idx: number) => {\r\n            if (element.key === key) {\r\n                state = true;\r\n                index = idx;\r\n            }\r\n        });\r\n        return { state, index };\r\n    }\r\n    // 发送消息\r\n    const sendMessage = () => {\r\n        if (!msg) {\r\n            message.error(\"请输入消息内容\");\r\n            return false\r\n        }\r\n        let sendToHimUrl: string;\r\n        let param: any;\r\n        if (adminUser === \"admin\") {\r\n            sendToHimUrl = httpUrl + '/chat/admin/sendToHim'\r\n            param = {\r\n                who: userActive,\r\n                msg: msg\r\n            }\r\n        } else {\r\n            sendToHimUrl = httpUrl + '/chat/' + myID + '/sendToHim'\r\n            param = {\r\n                who: \"admin\",\r\n                msg: msg\r\n            }\r\n        }\r\n        axios.post(sendToHimUrl, param).then((response: { data: any; }) => {\r\n            let res = response.data;\r\n            if (200 === res.success) {\r\n                // 清空发送的消息\r\n                setmessage(\"\")\r\n            } else {\r\n                setmessage(\"\")\r\n                message.error(res.message)\r\n            }\r\n        })\r\n    }\r\n    // 连接的是哪个客服\r\n    // const getCustomerService = (sessionIds: any) => {\r\n    //     let cName: string = \"\";\r\n    //     if (sessionIds) {\r\n    //         sessionIds.forEach((element: any) => {\r\n    //             if (element.indexOf(\"admin\") !== -1) {\r\n    //                 cName = element\r\n    //             }\r\n    //         });\r\n    //     }\r\n    //     return cName;\r\n    // }\r\n    const config = {\r\n        userList,\r\n        userActive,\r\n        onClickSelectUser,\r\n        userName,\r\n        adminUser,\r\n        chatList,\r\n        msg,\r\n        setmessage,\r\n        sendMessage\r\n    }\r\n    console.log(config);\r\n\r\n    return <Route path={path} exact={exact} strict={strict} render={\r\n        (props) => {\r\n            return <Component {...props} {...config} />\r\n        }\r\n    }></Route>\r\n\r\n}\r\nexport default withRouter(PrivateRoute)"]},"metadata":{},"sourceType":"module"}